from spyre import server
import matplotlib.pyplot as plt
import pandas as pd
import urllib2
import json
from scipy.misc import imread
from matplotlib.patches import Circle, Rectangle, Arc
import os
from matplotlib.offsetbox import  OffsetImage
import seaborn as sns

data = 'Data.xlsx'


#Player Mapping
def get_players(data):
    ''' Example: [{"label":"Gabe York", "value":"Gabe York"}] '''
    players_list = []

    df1 = pd.read_excel(data, sheetname='Season 2013-2014')
    for i in range(len(df1['Text'])):

        players_list.append(str(df1['Text'][i].split(' ')[0]+ ' ' +df1['Text'][i].split(' ')[1]))
    df2 = pd.read_excel(data, sheetname='Season 2014-2015')
    for i in range(len(df2['Text'])):

        players_list.append(str(df2['Text'][i].split(' ')[0]+ ' ' +df2['Text'][i].split(' ')[1]))
    df3 = pd.read_excel(data, sheetname='Season 2015-2016')
    for i in range(len(df3['Text'])):

        players_list.append(str(df3['Text'][i].split(' ')[0]+ ' ' +df3['Text'][i].split(' ')[1]))
    players = list(set(players_list))

    options_player = [{"label":"All Players" , "value":"All_players"}]#use this

    for e in players:

        options_player.append({"label":e,"value":e})
    return options_player
#Player Populate
options_player = get_players(data)


#Season Mapping

options_season = [{"label":"2015-2016", "value":"Season 2015-2016"}, #Maps to Data.xlsx sheetname
                  {"label":"2014-2015", "value":"Season 2014-2015"},
                  {"label":"2013-2014", "value":"Season 2013-2014"}]





class Arizona(server.App):
    title = "Arizona Basketball Interactive Shot Chart"


    inputs = [
	{"input_type" : 'dropdown',
	"label": 'Season',
	"options": options_season,
	"variable_name": 'Seasons',
	"action_id":"plot"},


	{"input_type":'dropdown',
     "label": 'Player',
     "options" : options_player,
     "variable_name": 'Player',
     "action_id": "plot" },

	 {
	"type":'radiobuttons',
	"label": 'MapType',
	"options" : [
	{"label": "Heat Map", "value":"HeatMap", "checked":True},
	{"label":"Shot Chart", "value":"Shot Chart"}],
	"key": 'MapType',
	"action_id" : "plot",
	}



    ]

    outputs = [{    "output_type" : "plot",
                    "output_id" : "plot",
                    "on_page_load" : True }]





    def getData(self, params):
        season = params['Seasons'] #Season 2013-2014
        player = params['Player'] #Gabe York or All_players

        df = pd.read_excel(data, sheetname=season)#read in season df

        if player == 'All_players':
            return df
        else:
            df['Clean_Players'] = [str(e.split(' ')[0] + ' ' + e.split(' ')[1]) for e in df.Text] #make Clean players list
            return df[df.Clean_Players == player]



    def getPlot(self, params):

        df = self.getData(params)
        if len(df.columns) == 11: #means we have player df
            player = params['Player'] #get the player

        maptype = params['MapType']
        if maptype == 'HeatMap':
			s = df[['Class','x','y']] #Create a series with Column(s) of Interest

			x = s['x']*10
			y = (s['y']*10)-30



			cmap=plt.cm.YlOrRd_r

			# n_levels sets the number of contour lines for the main kde plot
			joint_shot_chart = sns.jointplot(x, y, stat_func=None,
											 kind='kde', space=0, color=cmap(0.1),
											 cmap=cmap, n_levels=50)

			joint_shot_chart.fig.set_size_inches(12,11)

			# A joint plot has 3 Axes, the first one called ax_joint
			# is the one we want to draw our court onto and adjust some other settings
			ax = joint_shot_chart.ax_joint
			lw = 2


			hoop = Circle((0,0), radius=7.5, linewidth=lw, color='w', fill=False)
			backboard = Rectangle((-30, -7.5), 60, -1, linewidth=lw, color='w')
			inner_box = Rectangle((-60, -47.5), 120, 190, linewidth=lw, color='w',
								  fill=False)

			top_free_throw = Arc((0, 142.5), 120, 120, theta1=0, theta2=180,
								 linewidth=lw, color='w', fill=False)

			bottom_free_throw = Arc((0, 142.5), 120, 120, theta1=180, theta2=0,
									linewidth=lw, color='w', linestyle='dashed')
			restricted = Arc((0, 0), 60, 60, theta1=0, theta2=180, linewidth=lw,
							 color='w')
			three_arc = Arc((0,0), 425, 425, theta1=0, theta2=180,linewidth=lw, color='w')
			corner_three_a = Rectangle((-212.65, -47.5), 0, 48.5, linewidth=lw,
									   color='w')
			corner_three_b = Rectangle((212.45, -47.5), 0, 48.5, linewidth=lw, color='w')
			outer_lines = Rectangle((-250, -47.5), 500, 470, linewidth=lw,
										color='white', fill=False)
			center_outer_arc = Arc((0, 422.5), 120, 120, theta1=180, theta2=0,
								   linewidth=lw, color='w',zorder = 10)
			elements_list = [center_outer_arc, outer_lines,restricted, hoop, backboard, inner_box, top_free_throw, three_arc, corner_three_a, corner_three_b, bottom_free_throw]
			for e in elements_list:
				ax.add_patch(e)


			# Adjust the axis limits and orientation of the plot in order
			# to plot half court, with the hoop by the top of the plot
			ax.set_xlim(-250,250)
			ax.set_ylim(422.5, -47.5)

			# Get rid of axis labels and tick marks
			ax.set_xlabel('')
			ax.set_ylabel('')
			ax.tick_params(labelbottom='off', labelleft='off')

			# Add a title
			ax.set_title('Heat Map Shot Frequencies',
						 y=1.2, fontsize=18)

			# Add Data Scource and Author
			ax.text(-250,445,player + ' Heat Map',
					fontsize=12)

			pic = 'jpg/' + player+ '.jpg'

			# urlretrieve returns a tuple with our image as the first
			# element and imread reads in the image as a
			# mutlidimensional numpy array so matplotlib can plot it
			ppic = plt.imread(pic)
			img = OffsetImage(ppic, zoom=1.5)
			# Pass in a tuple of x,y coordinates to set_offset
			# to place the plot where you want, I just played around
			# with the values until I found a spot where I wanted
			# the image to be
			img.set_offset((890,870))
			# add the image
			ax.add_artist(img)

			fig = ax.get_figure()
			return fig

        elif maptype == 'Shot Chart':
			s = df[['Class','x','y']] #Create a series with Column(s) of Interest
			made = s[s.Class == 'made']
			missed = s[s.Class == 'missed']
			xmade = (made['x']*10)
			ymade = (made['y']*10)-30
			xmissed = (missed['x']*10)
			ymissed = (missed['y']*10)-30





			lw = 2
			plt.figure(figsize=(20,50))
			ax = plt.gca()
			hoop = Circle((0,0), radius=7.5, linewidth=lw, color='w', fill=False)
			backboard = Rectangle((-30, -7.5), 60, -1, linewidth=lw, color='w')
			inner_box = Rectangle((-60, -47.5), 120, 190, linewidth=lw, color='w',
									  fill=False)

			top_free_throw = Arc((0, 142.5), 120, 120, theta1=0, theta2=180,
									 linewidth=lw, color='w', fill=False)

			bottom_free_throw = Arc((0, 142.5), 120, 120, theta1=180, theta2=0,
										linewidth=lw, color='w', linestyle='dashed')
			restricted = Arc((0, 0), 60, 60, theta1=0, theta2=180, linewidth=lw,
								 color='w')
			three_arc = Arc((0,0), 425, 425, theta1=0, theta2=180,linewidth=lw, color='w')
			corner_three_a = Rectangle((-212.65, -47.5), 0, 48.5, linewidth=lw,
										   color='w')
			corner_three_b = Rectangle((212.45, -47.5), 0, 48.5, linewidth=lw, color='w')
			outer_lines = Rectangle((-250, -47.5), 500, 470, linewidth=lw,
											color='white', fill=False)
			center_outer_arc = Arc((0, 422.5), 120, 120, theta1=180, theta2=0,
									   linewidth=lw, color='w',zorder = 10)
			elements_list = [center_outer_arc, outer_lines,restricted, hoop, backboard, inner_box, top_free_throw, three_arc, corner_three_a, corner_three_b, bottom_free_throw]
			for e in elements_list:
				ax.add_patch(e)
			plt.scatter((xmade),(ymade), s=50,zorder=10, color='r', marker='o', label=' Made Shots')
			plt.scatter((xmissed),(ymissed), s=50,zorder=10, color='White', marker='o', label=' Missed Shots')
			legend = plt.legend(frameon=1, scatterpoints=1)
			frame = legend.get_frame()
			frame.set_color('white')
			frame.set_facecolor('grey')
			plt.xlim(-300,300)
			ax.set_ylim(422.5, -47.5)

			#player pictures
			if len(df.columns) == 11: #means we have player df
				ax.set_title(player + ' Shot Chart')
				picture_list = os.listdir('jpg')
				for e in picture_list:
					if str(e.split('.')[0]) == player:
						img_player = imread('jpg/' +player +'.jpg')
						try:

							plt.imshow(img_player,extent=[-300,-230,33,-50], zorder = 1)
						except NameError:
							pass


			img=imread('background.jpg')
			plt.imshow(img, extent=[-300,300,-100,500],zorder=0)
			fig = ax.get_figure()
			return fig



app = Arizona()
app.launch(port=9093)
